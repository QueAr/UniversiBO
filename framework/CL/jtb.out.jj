//
// Generated by JTB 1.3.2
//

options {
   IGNORE_CASE = true;
   STATIC = false;
}

PARSER_BEGIN(CLParser)
package parser;

import syntaxtree.*;
import java.util.Vector;


public class CLParser 
{
   public static void main(String args[]) throws ParseException
   {
      CLParser parser;
      if ( args.length == 0 )
      {
         System.out.println("JavaCC Parser:  Reading from standard input . . .");
         parser = new CLParser(System.in);
      }
      else
         if ( args.length == 1 )
         {
            System.out.println("JavaCC Parser:  Reading from file " + args[0]+ " . . .");
            try
            {
               parser = new CLParser(new java.io.FileInputStream(args[0]));
            }
            catch (java.io.FileNotFoundException e)
            {
               System.out.println("JavaCC Parser:  File " + args[0]+ " not found.");
               return;
            }
         }
         else
         {
            System.out.println("JavaCC Parser:  Usage is one of:");
            System.out.println("         java JavaCCParser < inputfile");
            System.out.println("OR");
            System.out.println("         java JavaCCParser inputfile");
            return;
         }
      try
      {
         start root = parser.start();
         root.accept(new visitor.SchemeTreeBuilder());
         System.out.println("JavaCC Parser:  Java program parsed successfully.");
      }
      catch (ParseException e)
      {
         System.out.println(e.getMessage());
         System.out.println("JavaCC Parser:  Encountered errors during parse.");
      }
   }
}

class JTBToolkit {
   static NodeToken makeNodeToken(Token t) {
      return new NodeToken(t.image.intern(), t.kind, t.beginLine, t.beginColumn, t.endLine, t.endColumn);
   }
}


PARSER_END(CLParser)

<DEFAULT, Var, Param> SKIP :
{
   " "
   | "\t"
   | "\n"
   | "\r"
   | "\f"
}

<DEFAULT> TOKEN :
{
   <LBRACE: "{">
   | <RBRACE: "}">
   | <IN: "IN"> : Param
   | <OUT: "OUT"> : Param
   | <END: ";">
   | <NUM: "0" | ["1"-"9"] (["0"-"9"])*>
   | <TIME: "TIME">
   | <EVENT: "EVENT"> : Var
   | <DEF: "DEF">
   | <STARTS: "STARTS">
   | <WHEN: "WHEN">
   | <ENDS: "ENDS">
   | <DOLLARO: "$"> : Var
   | <NS: "#"> : Var
   | <AT: "@"> : Var
   | <RANGE_SEP: "..">
   | <LIST_SEP: ",">
   | <DEF_OP: "OP">
   | <O_BRACE: "(">
   | <C_BRACE: ")">
}

<Var> TOKEN :
{
   <VARIABILE: <ID>> : DEFAULT
}

<Param> TOKEN :
{
   <NOME: ["a"-"z", "A"-"Z"] (["a"-"z", "A"-"Z"] | ["_"] | ["0"-"9"])*>
   | <STAR: "*">
   | <STOP: ";"> : DEFAULT
   | <COMMA: ",">
   | <OPEN: "{">
   | <CLOSE: "}">
}

<DEFAULT, Var> TOKEN :
{
   <#LETTER: ["a"-"z", "A"-"Z"]>
   | <#DIGIT: ["_"] | <CIFRA>>
   | <#CIFRA: ["0"-"9"]>
   | <#ID: <LETTER> (<LETTER> | <DIGIT>)*>
}

<DEFAULT> TOKEN :
{
   <STRINGA: "\"" ((~["\"", "\\", "\n", "\r"]) | ("\\" (["n", "t", "b", "r", "f", "\\", "'", "\""] | ["0"-"7"] (["0"-"7"])? | ["0"-"3"] ["0"-"7"] ["0"-"7"])))* "\"">
      {
         matchedToken.image = image.substring(1,image.length() - 1);
      }
   | <#SYMBOL: ["\\", "|", "!", "%", "&", "/", "=", "'", "^", "+", "-", "<", ">", ".", "*", ":"]>
}

TOKEN_MGR_DECLS:{
   static int nesting = 0;
}


TOKEN :
{
   <NSLEFT: "["> : WithinNsbody
}

<WithinNsbody> MORE :
{
   "["
      {
         nesting++;
      } : InnerBody
   | <~["[", "]"]>
}

<InnerBody> MORE :
{
   "]"
      {
         nesting--;
         if ( nesting == 0 )
            SwitchTo(WithinNsbody);
      }
   | "["
      {
         nesting++;
      }
   | <~["[", "]"]>
}

<WithinNsbody> TOKEN :
{
   <NSRIGHT: "]">
      {
         System.out.println("pippo " + image);
         matchedToken.image = image.substring(0,image.length() - 1);
      } : DEFAULT
}

<DEFAULT> TOKEN :
{
   <CALL: "->"> : Var
   | <OP: (<SYMBOL>)+ | <ID>>
}

start start() :
{
   NodeListOptional n0 = new NodeListOptional();
   istruzione n1;

   
}
{
   (
      n1=istruzione()
      { n0.addNode(n1); }
   )*
   { n0.nodes.trimToSize(); }
   
   { return new start(n0); }
}

istruzione istruzione() :
{
   NodeChoice n0;
   eventDefinition n1;
   startDefinition n2;
   opDefinition n3;

   
}
{
   (
      n1=eventDefinition()
      { n0 = new NodeChoice(n1, 0); }
   |
      n2=startDefinition()
      { n0 = new NodeChoice(n2, 1); }
   |
      n3=opDefinition()
      { n0 = new NodeChoice(n3, 2); }
   )
   
   { return new istruzione(n0); }
}

eventDefinition eventDefinition() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   condition n6;
   NodeToken n7;
   Token n8;

   
}
{
   n1=<EVENT> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<VARIABILE> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<DEF> { n4 = JTBToolkit.makeNodeToken(n5); }
   n6=condition()
   n8=<END> { n7 = JTBToolkit.makeNodeToken(n8); }
   
   { return new eventDefinition(n0,n2,n4,n6,n7); }
}

startDefinition startDefinition() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   condition n4;
   NodeOptional n5 = new NodeOptional();
   NodeSequence n6;
   NodeToken n7;
   Token n8;
   NodeToken n9;
   Token n10;
   condition n11;
   NodeToken n12;
   Token n13;

   
}
{
   n1=<STARTS> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<WHEN> { n2 = JTBToolkit.makeNodeToken(n3); }
   n4=condition()
   (
      { n6 = new NodeSequence(3); }
      n8=<ENDS> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n6.addNode(n7); }
      n10=<WHEN> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n6.addNode(n9); }
      n11=condition()
      { n6.addNode(n11); }
      { n5.addNode(n6); }
   )?
   n13=<END> { n12 = JTBToolkit.makeNodeToken(n13); }
   
   { return new startDefinition(n0,n2,n4,n5,n12); }
}

opDefinition opDefinition() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   NodeToken n8;
   Token n9;
   NodeToken n10;
   Token n11;
   NodeToken n12;
   Token n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   listaParam n18;
   NodeToken n19;
   Token n20;
   NodeToken n21;
   Token n22;
   listaParam n23;
   NodeToken n24;
   Token n25;
   NodeToken n26;
   Token n27;
   NodeToken n28;
   Token n29;
   NodeToken n30;
   Token n31;
   NodeToken n32;
   Token n33;
   NodeToken n34;
   Token n35;
   NodeToken n36;
   Token n37;

   
}
{
   n1=<DEF_OP> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<O_BRACE> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<OP> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=<LIST_SEP> { n6 = JTBToolkit.makeNodeToken(n7); }
   n9=<NUM> { n8 = JTBToolkit.makeNodeToken(n9); }
   n11=<LIST_SEP> { n10 = JTBToolkit.makeNodeToken(n11); }
   n13=<NUM> { n12 = JTBToolkit.makeNodeToken(n13); }
   n15=<C_BRACE> { n14 = JTBToolkit.makeNodeToken(n15); }
   n17=<IN> { n16 = JTBToolkit.makeNodeToken(n17); }
   n18=listaParam()
   n20=<STOP> { n19 = JTBToolkit.makeNodeToken(n20); }
   n22=<OUT> { n21 = JTBToolkit.makeNodeToken(n22); }
   n23=listaParam()
   n25=<STOP> { n24 = JTBToolkit.makeNodeToken(n25); }
   n27=<DEF> { n26 = JTBToolkit.makeNodeToken(n27); }
   n29=<NS> { n28 = JTBToolkit.makeNodeToken(n29); }
   n31=<VARIABILE> { n30 = JTBToolkit.makeNodeToken(n31); }
   n33=<NSLEFT> { n32 = JTBToolkit.makeNodeToken(n33); }
   n35=<NSRIGHT> { n34 = JTBToolkit.makeNodeToken(n35); }
   n37=<END> { n36 = JTBToolkit.makeNodeToken(n37); }
   
   { return new opDefinition(n0,n2,n4,n6,n8,n10,n12,n14,n16,n18,n19,n21,n23,n24,n26,n28,n30,n32,n34,n36); }
}

listaParam listaParam() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   listaParam n6;
   NodeToken n7;
   Token n8;
   NodeOptional n9 = new NodeOptional();
   NodeToken n10;
   Token n11;
   NodeListOptional n12 = new NodeListOptional();
   NodeSequence n13;
   NodeToken n14;
   Token n15;
   NodeToken n16;
   Token n17;
   NodeOptional n18;
   NodeSequence n19;
   NodeToken n20;
   Token n21;
   listaParam n22;
   NodeToken n23;
   Token n24;
   NodeOptional n25;
   NodeToken n26;
   Token n27;

   
}
{
   n1=<NOME> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(3); }
      n5=<OPEN> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n6=listaParam()
      { n3.addNode(n6); }
      n8=<CLOSE> { n7 = JTBToolkit.makeNodeToken(n8); }
      { n3.addNode(n7); }
      { n2.addNode(n3); }
   )?
   (
      n11=<STAR> { n10 = JTBToolkit.makeNodeToken(n11); }
      { n9.addNode(n10); }
   )?
   (
      { n18 = new NodeOptional(); }
      { n25 = new NodeOptional(); }
      { n13 = new NodeSequence(4); }
      n15=<COMMA> { n14 = JTBToolkit.makeNodeToken(n15); }
      { n13.addNode(n14); }
      n17=<NOME> { n16 = JTBToolkit.makeNodeToken(n17); }
      { n13.addNode(n16); }
      (
         { n19 = new NodeSequence(3); }
         n21=<OPEN> { n20 = JTBToolkit.makeNodeToken(n21); }
         { n19.addNode(n20); }
         n22=listaParam()
         { n19.addNode(n22); }
         n24=<CLOSE> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n19.addNode(n23); }
         { n18.addNode(n19); }
      )?
      { n13.addNode(n18); }
      (
         n27=<STAR> { n26 = JTBToolkit.makeNodeToken(n27); }
         { n25.addNode(n26); }
      )?
      { n13.addNode(n25); }
      { n12.addNode(n13); }
   )*
   { n12.nodes.trimToSize(); }
   
   { return new listaParam(n0,n2,n9,n12); }
}

condition condition() :
{
   NodeChoice n0;
   NodeSequence n1;
   term n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   term n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   NodeToken n11;
   Token n12;
   condition n13;
   NodeListOptional n14 = new NodeListOptional();
   NodeSequence n15;
   NodeToken n16;
   Token n17;
   condition n18;
   NodeOptional n19 = new NodeOptional();
   outputFilter n20;
   NodeToken n21;
   Token n22;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n2=term()
      { n1.addNode(n2); }
      (
         { n4 = new NodeSequence(2); }
         n6=<OP> { n5 = JTBToolkit.makeNodeToken(n6); }
         { n4.addNode(n5); }
         n7=term()
         { n4.addNode(n7); }
         { n3.addNode(n4); }
      )*
      { n3.nodes.trimToSize(); }
      { n1.addNode(n3); }
      { n0 = new NodeChoice(n1, 0); }
   |
      { n8 = new NodeSequence(6); }
      n10=<OP> { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
      n12="(" { n11 = JTBToolkit.makeNodeToken(n12); }
      { n8.addNode(n11); }
      n13=condition()
      { n8.addNode(n13); }
      (
         { n15 = new NodeSequence(2); }
         n17=<LIST_SEP> { n16 = JTBToolkit.makeNodeToken(n17); }
         { n15.addNode(n16); }
         n18=condition()
         { n15.addNode(n18); }
         { n14.addNode(n15); }
      )*
      { n14.nodes.trimToSize(); }
      { n8.addNode(n14); }
      (
         n20=outputFilter()
         { n19.addNode(n20); }
      )?
      { n8.addNode(n19); }
      n22=")" { n21 = JTBToolkit.makeNodeToken(n22); }
      { n8.addNode(n21); }
      { n0 = new NodeChoice(n8, 1); }
   )
   
   { return new condition(n0); }
}

outputFilter outputFilter() :
{
   NodeToken n0;
   Token n1;
   NodeOptional n2 = new NodeOptional();
   NodeSequence n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;
   listaParam n8;
   NodeToken n9;
   Token n10;

   
}
{
   n1=<OUT> { n0 = JTBToolkit.makeNodeToken(n1); }
   (
      { n3 = new NodeSequence(2); }
      n5=<OPEN> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n3.addNode(n4); }
      n7=<CLOSE> { n6 = JTBToolkit.makeNodeToken(n7); }
      { n3.addNode(n6); }
      { n2.addNode(n3); }
   )?
   n8=listaParam()
   n10=<STOP> { n9 = JTBToolkit.makeNodeToken(n10); }
   
   { return new outputFilter(n0,n2,n8,n9); }
}

lista lista() :
{
   NodeToken n0;
   Token n1;
   condition n2;
   NodeListOptional n3 = new NodeListOptional();
   NodeSequence n4;
   NodeToken n5;
   Token n6;
   condition n7;
   NodeToken n8;
   Token n9;

   
}
{
   n1="{" { n0 = JTBToolkit.makeNodeToken(n1); }
   n2=condition()
   (
      { n4 = new NodeSequence(2); }
      n6=<LIST_SEP> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n4.addNode(n5); }
      n7=condition()
      { n4.addNode(n7); }
      { n3.addNode(n4); }
   )*
   { n3.nodes.trimToSize(); }
   n9="}" { n8 = JTBToolkit.makeNodeToken(n9); }
   
   { return new lista(n0,n2,n3,n8); }
}

term term() :
{
   NodeChoice n0;
   NodeSequence n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   namespace n6;
   elem n7;
   NodeSequence n8;
   NodeToken n9;
   Token n10;
   condition n11;
   NodeToken n12;
   Token n13;
   NodeSequence n14;
   NodeToken n15;
   Token n16;
   NodeToken n17;
   Token n18;
   NodeListOptional n19 = new NodeListOptional();
   NodeSequence n20;
   NodeToken n21;
   Token n22;
   NodeToken n23;
   Token n24;
   NodeToken n25;
   Token n26;
   NodeOptional n27;
   NodeSequence n28;
   condition n29;
   NodeListOptional n30;
   NodeSequence n31;
   NodeToken n32;
   Token n33;
   condition n34;
   NodeToken n35;
   Token n36;
   lista n37;

   
}
{
   (
      { n1 = new NodeSequence(2); }
      n3=<DOLLARO> { n2 = JTBToolkit.makeNodeToken(n3); }
      { n1.addNode(n2); }
      n5=<VARIABILE> { n4 = JTBToolkit.makeNodeToken(n5); }
      { n1.addNode(n4); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n6=namespace()
      { n0 = new NodeChoice(n6, 1); }
   |
      n7=elem()
      { n0 = new NodeChoice(n7, 2); }
   |
      { n8 = new NodeSequence(3); }
      n10="(" { n9 = JTBToolkit.makeNodeToken(n10); }
      { n8.addNode(n9); }
      n11=condition()
      { n8.addNode(n11); }
      n13=")" { n12 = JTBToolkit.makeNodeToken(n13); }
      { n8.addNode(n12); }
      { n0 = new NodeChoice(n8, 3); }
   |
      { n14 = new NodeSequence(3); }
      n16=<AT> { n15 = JTBToolkit.makeNodeToken(n16); }
      { n14.addNode(n15); }
      n18=<VARIABILE> { n17 = JTBToolkit.makeNodeToken(n18); }
      { n14.addNode(n17); }
      (
         { n27 = new NodeOptional(); }
         { n20 = new NodeSequence(5); }
         n22=<CALL> { n21 = JTBToolkit.makeNodeToken(n22); }
         { n20.addNode(n21); }
         n24=<VARIABILE> { n23 = JTBToolkit.makeNodeToken(n24); }
         { n20.addNode(n23); }
         n26="(" { n25 = JTBToolkit.makeNodeToken(n26); }
         { n20.addNode(n25); }
         (
            { n30 = new NodeListOptional(); }
            { n28 = new NodeSequence(2); }
            n29=condition()
            { n28.addNode(n29); }
            (
               { n31 = new NodeSequence(2); }
               n33="," { n32 = JTBToolkit.makeNodeToken(n33); }
               { n31.addNode(n32); }
               n34=condition()
               { n31.addNode(n34); }
               { n30.addNode(n31); }
            )*
            { n30.nodes.trimToSize(); }
            { n28.addNode(n30); }
            { n27.addNode(n28); }
         )?
         { n20.addNode(n27); }
         n36=")" { n35 = JTBToolkit.makeNodeToken(n36); }
         { n20.addNode(n35); }
         { n19.addNode(n20); }
      )*
      { n19.nodes.trimToSize(); }
      { n14.addNode(n19); }
      { n0 = new NodeChoice(n14, 4); }
   |
      n37=lista()
      { n0 = new NodeChoice(n37, 5); }
   )
   
   { return new term(n0); }
}

elem elem() :
{
   NodeChoice n0;
   NodeToken n1;
   Token n2;
   NodeToken n3;
   Token n4;
   NodeToken n5;
   Token n6;

   
}
{
   (
      n2=<NUM> { n1 = JTBToolkit.makeNodeToken(n2); }
      { n0 = new NodeChoice(n1, 0); }
   |
      n4=<TIME> { n3 = JTBToolkit.makeNodeToken(n4); }
      { n0 = new NodeChoice(n3, 1); }
   |
      n6=<STRINGA> { n5 = JTBToolkit.makeNodeToken(n6); }
      { n0 = new NodeChoice(n5, 2); }
   )
   
   { return new elem(n0); }
}

namespace namespace() :
{
   NodeToken n0;
   Token n1;
   NodeToken n2;
   Token n3;
   NodeToken n4;
   Token n5;
   NodeToken n6;
   Token n7;

   
}
{
   n1=<NS> { n0 = JTBToolkit.makeNodeToken(n1); }
   n3=<VARIABILE> { n2 = JTBToolkit.makeNodeToken(n3); }
   n5=<NSLEFT> { n4 = JTBToolkit.makeNodeToken(n5); }
   n7=<NSRIGHT> { n6 = JTBToolkit.makeNodeToken(n7); }
   
   { return new namespace(n0,n2,n4,n6); }
}
