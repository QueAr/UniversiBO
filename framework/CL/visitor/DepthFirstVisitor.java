//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class DepthFirstVisitor implements Visitor {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public void visit(NodeList n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
   }

   public void visit(NodeListOptional n) {
      if ( n.present() )
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
            e.nextElement().accept(this);
   }

   public void visit(NodeOptional n) {
      if ( n.present() )
         n.node.accept(this);
   }

   public void visit(NodeSequence n) {
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); )
         e.nextElement().accept(this);
   }

   public void visit(NodeToken n) { }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> ( istruzione() )*
    */
   public void visit(start n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> eventDefinition()
    *       | startDefinition()
    *       | opDefinition()
    */
   public void visit(istruzione n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <EVENT>
    * f1 -> <VARIABILE>
    * f2 -> <DEF>
    * f3 -> condition()
    * f4 -> <END>
    */
   public void visit(eventDefinition n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * f0 -> <STARTS>
    * f1 -> <WHEN>
    * f2 -> condition()
    * f3 -> ( <ENDS> <WHEN> condition() )?
    * f4 -> <END>
    */
   public void visit(startDefinition n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
   }

   /**
    * f0 -> <DEF_OP>
    * f1 -> <O_BRACE>
    * f2 -> <OP>
    * f3 -> <LIST_SEP>
    * f4 -> <NUM>
    * f5 -> <LIST_SEP>
    * f6 -> <NUM>
    * f7 -> <C_BRACE>
    * f8 -> <IN>
    * f9 -> listaParam()
    * f10 -> <STOP>
    * f11 -> <OUT>
    * f12 -> listaParam()
    * f13 -> <STOP>
    * f14 -> <DEF>
    * f15 -> <NS>
    * f16 -> <VARIABILE>
    * f17 -> <NSLEFT>
    * f18 -> <NSRIGHT>
    * f19 -> <END>
    */
   public void visit(opDefinition n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      n.f14.accept(this);
      n.f15.accept(this);
      n.f16.accept(this);
      n.f17.accept(this);
      n.f18.accept(this);
      n.f19.accept(this);
   }

   /**
    * f0 -> <NOME>
    * f1 -> ( <OPEN> listaParam() <CLOSE> )?
    * f2 -> ( <STAR> )?
    * f3 -> ( <COMMA> <NOME> ( <OPEN> listaParam() <CLOSE> )? ( <STAR> )? )*
    */
   public void visit(listaParam n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> term() ( <OP> term() )*
    *       | <OP> "(" condition() ( <LIST_SEP> condition() )* ( outputFilter() )? ")"
    */
   public void visit(condition n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <OUT>
    * f1 -> ( <OPEN> <CLOSE> )?
    * f2 -> listaParam()
    * f3 -> <STOP>
    */
   public void visit(outputFilter n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> "{"
    * f1 -> condition()
    * f2 -> ( <LIST_SEP> condition() )*
    * f3 -> "}"
    */
   public void visit(lista n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

   /**
    * f0 -> <DOLLARO> <VARIABILE>
    *       | namespace()
    *       | elem()
    *       | "(" condition() ")"
    *       | <AT> <VARIABILE> ( <CALL> <VARIABILE> "(" ( condition() ( "," condition() )* )? ")" )*
    *       | lista()
    */
   public void visit(term n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <NUM>
    *       | <TIME>
    *       | <STRINGA>
    */
   public void visit(elem n) {
      n.f0.accept(this);
   }

   /**
    * f0 -> <NS>
    * f1 -> <VARIABILE>
    * f2 -> <NSLEFT>
    * f3 -> <NSRIGHT>
    */
   public void visit(namespace n) {
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
   }

}
